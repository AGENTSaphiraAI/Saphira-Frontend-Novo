ðŸ’Ž SUPERBLOCO FRONTEND â€” PATCH FINAL PARA CORS E FETCH
âœ… Mensagem para o agente (ou IA revisora)
ðŸŸ¢ "OlÃ¡ agente, por favor, revise e confirme todas as alteraÃ§Ãµes abaixo antes de aplicar. O objetivo Ã© garantir comunicaÃ§Ã£o perfeita entre o frontend e o backend (CORS), eliminar erros 404/OPTIONS e garantir que as respostas poÃ©ticas da Saphira cheguem ao app corretamente. Caso veja algo que possa ser melhorado, sugira antes de aplicar. Segue bloco completo:"

ðŸ’» CÃ³digo atualizado (bloco Ãºnico para App.tsx)
tsx
Copiar
Editar
// src/App.tsx

import React, { useState } from "react";

export default function App() {
  const [texto, setTexto] = useState("");
  const [pergunta, setPergunta] = useState("");
  const [resposta, setResposta] = useState("Aguardando sua anÃ¡lise...");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async () => {
    setLoading(true);
    setResposta("Analisando, por favor aguarde...");

    try {
      const response = await fetch("https://teu-backend-url/api/analyze", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          text: texto,
          question: pergunta,
        }),
        credentials: "omit", // âœ… Explicitamente omitido para evitar cookies e cabeÃ§alhos extras
        mode: "cors"         // âœ… Explicitamente definido para CORS
      });

      if (!response.ok) {
        throw new Error(`Erro na requisiÃ§Ã£o: ${response.statusText}`);
      }

      const data = await response.json();
      setResposta(data.displayData.humanized_text || "AnÃ¡lise concluÃ­da, mas sem resposta detalhada.");
    } catch (error) {
      console.error("Erro ao enviar texto:", error);
      setResposta("Tive dificuldades para refletir sobre seu texto. Tente novamente ou envie outro conteÃºdo.");
    }

    setLoading(false);
  };

  return (
    <div style={{ maxWidth: "600px", margin: "auto", padding: "20px", textAlign: "center" }}>
      <h1>ðŸ’™ Saphira</h1>
      <h2>AnÃ¡lise Inteligente e EmpÃ¡tica</h2>

      <textarea
        placeholder="Digite ou cole seu texto aqui..."
        value={texto}
        onChange={(e) => setTexto(e.target.value)}
        rows={6}
        style={{ width: "100%", marginBottom: "10px" }}
      ></textarea>

      <input
        placeholder="Pergunta EspecÃ­fica (Opcional)"
        value={pergunta}
        onChange={(e) => setPergunta(e.target.value)}
        style={{ width: "100%", marginBottom: "10px" }}
      />

      <div style={{ display: "flex", justifyContent: "space-around", marginBottom: "20px" }}>
        <button onClick={handleSubmit} disabled={loading} style={{ padding: "10px 20px", cursor: "pointer" }}>
          ðŸ”Ž {loading ? "Analisando..." : "Analisar"}
        </button>
        <button onClick={() => { setTexto(""); setPergunta(""); setResposta("Aguardando sua anÃ¡lise..."); }} style={{ padding: "10px 20px", cursor: "pointer" }}>
          ðŸ§¹ Limpar
        </button>
      </div>

      <div style={{ border: "1px solid #ddd", borderRadius: "8px", padding: "15px", background: "#f9f9f9" }}>
        <h3>ðŸ’¬ Saphira diz:</h3>
        <p>{resposta}</p>
      </div>
    </div>
  );
}
âœ… OrientaÃ§Ãµes importantes
URL do backend: substitua "https://teu-backend-url/api/analyze" pelo endpoint real do seu Replit (por exemplo, https://saphira-engine-guilhermeg...replit.app/api/analyze).

credentials: "omit" resolve o bloqueio do preflight.

mode: "cors" obriga o browser a usar CORS corretamente.