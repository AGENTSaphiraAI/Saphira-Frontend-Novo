üöÄ Superbloco Consolidado ‚Äî Modal de Auditoria T√©cnica v1.0
‚úÖ Objetivo: Implementar um modal t√©cnico de alta performance, visualmente impressionante e com experi√™ncia de usu√°rio (UX) aprimorada, integrando-o perfeitamente √† aplica√ß√£o principal.
Nota de Engenharia (Gemini): A estrutura fornecida estava excelente. As otimiza√ß√µes abaixo focam em:
Seguran√ßa de Tipos (TypeScript): Eliminar o uso de any.
Robustez: Garantir que o componente n√£o quebre com dados inesperados.
Experi√™ncia de Usu√°rio: Adicionar anima√ß√µes sutis e intera√ß√µes intuitivas (como fechar com a tecla 'Escape').
Performance: Garantir que o CSS seja limpo e as anima√ß√µes, fluidas.
PASSO 1: Criar o Novo Componente do Modal
Crie o arquivo abaixo. Este c√≥digo j√° est√° otimizado com seguran√ßa de tipos, tratamento para dados ausentes e melhorias de UX.
// üìÅ ARQUIVO NOVO: src/components/analysis/TechnicalAuditModal.tsx
Generated typescript
import React, { useEffect } from 'react';
import { Radar, RadarChart, PolarGrid, PolarAngleAxis, Legend, ResponsiveContainer } from 'recharts';
import ReactJson from 'react-json-view';

// ‚ú® OTIMIZA√á√ÉO: Interface para seguran√ßa de tipos. Chega de 'any'.
interface TechnicalData {
  tone?: number;
  bias?: number;
  clarity?: number;
  consistency?: number;
  contradiction?: number;
  [key: string]: any; // Permite outras chaves
}

interface TechnicalAuditModalProps {
  technicalData: TechnicalData | null;
  onClose: () => void;
};

const TechnicalAuditModal: React.FC<TechnicalAuditModalProps> = ({ technicalData, onClose }) => {
  // ‚ú® OTIMIZA√á√ÉO: Hook para fechar o modal com a tecla 'Escape' (melhora de UX).
  useEffect(() => {
    const handleEsc = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };
    window.addEventListener('keydown', handleEsc);

    return () => {
      window.removeEventListener('keydown', handleEsc);
    };
  }, [onClose]);

  // ‚ú® OTIMIZA√á√ÉO: Guarda de seguran√ßa. N√£o renderiza nada se n√£o houver dados.
  if (!technicalData) {
    return null;
  }

  // Mapeamento robusto dos dados para o gr√°fico.
  const radarData = [
    { subject: 'Clareza', score: technicalData.clarity || 0, fullMark: 100 },
    { subject: 'Consist√™ncia', score: technicalData.consistency || 0, fullMark: 100 },
    { subject: 'Vi√©s Detectado', score: technicalData.bias || 0, fullMark: 100 },
    { subject: 'Contradi√ß√£o', score: technicalData.contradiction || 0, fullMark: 100 },
    { subject: 'Tom (Positivo)', score: technicalData.tone || 0, fullMark: 100 },
  ];

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <button className="modal-close-button" onClick={onClose}>√ó</button>
        <h2>An√°lise T√©cnica Detalhada</h2>

        <div className="chart-container">
          <ResponsiveContainer width="100%" height="100%">
            <RadarChart outerRadius="80%" data={radarData}>
              <PolarGrid stroke="#4A5568" />
              <PolarAngleAxis dataKey="subject" tick={{ fill: '#E2E8F0' }} />
              <Radar name="Saphira Score" dataKey="score" stroke="#0B74E5" fill="#0B74E5" fillOpacity={0.7} />
              <Legend />
            </RadarChart>
          </ResponsiveContainer>
        </div>
        
        <div className="json-container">
          <h3>Estrutura de Dados Completa</h3>
          <ReactJson
            src={technicalData}
            theme="ocean"
            iconStyle="triangle"
            collapsed={2}
            displayDataTypes={false}
            enableClipboard={false}
            style={{ padding: '1rem', borderRadius: '8px' }}
          />
        </div>
      </div>
    </div>
  );
};

export default TechnicalAuditModal;
Use code with caution.
TypeScript
PASSO 2: Adicionar o Estilo do Modal
Adicione este c√≥digo ao seu arquivo CSS principal. Ele cont√©m as anima√ß√µes e os estilos para todos os novos elementos.
// üé® ARQUIVO A SER ATUALIZADO: src/App.css (ou seu arquivo de estilo principal)
Generated css
/* Anima√ß√£o de entrada para o modal */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideIn {
  from { transform: translateY(-30px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

/* Estilo do Overlay (fundo escuro) */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(10, 25, 47, 0.8);
  backdrop-filter: blur(5px);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  animation: fadeIn 0.3s ease-out;
}

/* Conte√∫do do Modal */
.modal-content {
  background: #0A192F; /* Fundo do modal um pouco mais escuro que o overlay */
  color: #E2E8F0;
  padding: 2rem 2.5rem;
  border-radius: 16px;
  border: 1px solid #0B74E5;
  box-shadow: 0 10px 30px rgba(2, 12, 27, 0.7);
  max-width: 800px;
  width: 90%;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;
  animation: slideIn 0.4s ease-out;
}

.modal-content h2 {
  color: #FFFFFF;
  margin-bottom: 1.5rem;
  text-align: center;
  border-bottom: 2px solid #0B74E5;
  padding-bottom: 1rem;
}

.chart-container {
  width: 100%;
  height: 350px;
  margin-bottom: 2rem;
}

.json-container h3 {
  color: #FFFFFF;
  margin-top: 1rem;
  margin-bottom: 1rem;
}

/* Bot√£o de Fechar do Modal (X no canto) */
.modal-close-button {
  position: absolute;
  top: 15px;
  right: 20px;
  background: transparent;
  border: none;
  color: #CBD5E0;
  font-size: 2rem;
  cursor: pointer;
  line-height: 1;
  transition: all 0.2s ease;
}

.modal-close-button:hover {
  color: #FFFFFF;
  transform: scale(1.1);
}
Use code with caution.
Css
PASSO 3: Integrar Tudo na Aplica√ß√£o Principal
Modifique seu arquivo App.tsx para incluir a l√≥gica que controla a exibi√ß√£o do modal.
// üîó ARQUIVO A SER ATUALIZADO: src/App.tsx
Generated typescript
// 1. Adicione a importa√ß√£o do novo modal
import TechnicalAuditModal from './components/analysis/TechnicalAuditModal';

// 2. Dentro do seu componente App
function App() {
  // ...seus outros estados (isAnalyzing, response, etc.)...

  // ‚ú® OTIMIZA√á√ÉO: Um √∫nico estado para controlar tanto os dados quanto a exibi√ß√£o do bot√£o.
  // Come√ßa como 'null'. Quando recebe os dados, o bot√£o aparece.
  const [technicalAuditData, setTechnicalAuditData] = useState<object | null>(null);

  // ‚ú® OTIMIZA√á√ÉO: Um estado separado e claro para a visibilidade do modal.
  const [isModalOpen, setIsModalOpen] = useState(false);


  // 3. Ap√≥s a sua chamada de API, quando voc√™ recebe a resposta:
  const handleAnalysisSuccess = (apiResponse: any) => {
    // ...seu c√≥digo que processa a resposta principal...
    
    // Armazena os dados t√©cnicos para o modal.
    setTechnicalAuditData(apiResponse.technicalData); 
  };
  
  // Fun√ß√£o para limpar o estado (provavelmente usada no seu bot√£o "Limpar")
  const handleClear = () => {
    // ...seu outro c√≥digo de limpeza...
    setTechnicalAuditData(null);
    setIsModalOpen(false);
  };


  // 4. No seu JSX, adicione o bot√£o e o modal:
  return (
    <div className="app-container">
      {/* ... seu layout principal, textarea, bot√µes ... */}

      {/* Bot√£o de An√°lise Detalhada (s√≥ aparece se houver dados t√©cnicos) */}
      {technicalAuditData && (
        <button
          onClick={() => setIsModalOpen(true)}
          className="btn-technical-analysis" // Recomendo uma classe espec√≠fica
        >
          üîé Ver An√°lise T√©cnica Detalhada
        </button>
      )}

      {/* Renderiza√ß√£o do Modal (s√≥ monta quando isModalOpen √© true) */}
      {isModalOpen && (
        <TechnicalAuditModal
          technicalData={technicalAuditData}
          onClose={() => setIsModalOpen(false)}
        />
      )}
    </div>
  );
}