1. Instalação de Dependência:
Execute no shell para adicionar o renderizador de Markdown.
Generated bash
npm install react-markdown
Use code with caution.
Bash
2. Criação do Componente da Aba "Sobre":
Crie o arquivo src/components/AboutSaphira.tsx. Ele será responsável por buscar e exibir a documentação do projeto.
Generated typescript
// Caminho: src/components/AboutSaphira.tsx
import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import './AboutSaphira.css';

const AboutSaphira: React.FC = () => {
    const [readme, setReadme] = useState<string>('');
    const [isLoading, setIsLoading] = useState<boolean>(true);
    useEffect(() => {
        const backendUrl = `https://${window.location.hostname.replace('saphira-frontend-novo', 'Saphira-Engine-Backend')}`;
        fetch(`${backendUrl}/api/readme`)
            .then(res => res.ok ? res.json() : Promise.reject(res))
            .then(data => setReadme(data.readme_content || '# Documento não encontrado ou o conteúdo está vazio.'))
            .catch(error => { console.error("Erro ao buscar README:", error); setReadme('# Erro de Conexão.\n\nNão foi possível carregar as informações do projeto.'); })
            .finally(() => setIsLoading(false));
    }, []);
    return (
        <div className="about-container">
            {isLoading ? <p>Carregando o manifesto do projeto Saphira...</p> : <ReactMarkdown>{readme}</ReactMarkdown>}
        </div>
    );
};
export default AboutSaphira;
Use code with caution.
TypeScript
3. Estilização do Novo Componente:
Crie o arquivo src/components/AboutSaphira.css com o seguinte conteúdo otimizado.
Generated css
/* Caminho: src/components/AboutSaphira.css */
.about-container{padding:2rem;background-color:rgba(30,30,30,.8);color:#d4d4d4;border-radius:8px;margin:1rem;font-family:Segoe UI,Tahoma,Geneva,Verdana,sans-serif;line-height:1.7;backdrop-filter:blur(5px)}.about-container h1,.about-container h2,.about-container h3{color:#4eacff;border-bottom:1px solid #444;padding-bottom:.3em;margin-top:1.5em}.about-container p{margin-bottom:1.2em}.about-container code{background-color:#1a1a1a;padding:.2em .5em;border-radius:4px;font-family:Consolas,Monaco,Andale Mono,Ubuntu Mono,monospace;font-size:.9em}.about-container pre{background-color:#1a1a1a;padding:1em;border-radius:5px;overflow-x:auto;border:1px solid #444}
Use code with caution.
Css
4. Refatoração Estrutural do Dashboard Principal:
Modifique o arquivo AnalysisDashboard.tsx. Esta é a etapa mais crítica. Você não irá apagar código, mas sim envelopar a estrutura JSX existente dentro do novo layout de abas.
Generated typescript
// Caminho: AnalysisDashboard.tsx
import React, { useState } from 'react';
import AboutSaphira from './components/AboutSaphira';
// Mantenha todas as outras importações existentes...

const AnalysisDashboard: React.FC = () => {
  // Adicione este novo estado para controlar a aba ativa.
  const [activeTab, setActiveTab] = useState<'analise' | 'sobre'>('analise');
  
  // Mantenha todos os outros hooks de estado (useState, useEffect, etc.) existentes.

  // Refatore a declaração de retorno para ter a seguinte estrutura:
  return (
    <div className="dashboard-container">
      {/* Nova seção de navegação */}
      <div className="tab-navigation">
        <button onClick={() => setActiveTab('analise')} className={activeTab === 'analise' ? 'active' : ''}>Análise de Dados</button>
        <button onClick={() => setActiveTab('sobre')} className={activeTab === 'sobre' ? 'active' : ''}>Sobre a Saphira</button>
      </div>

      {/* Nova seção de conteúdo das abas */}
      <div className="tab-content">
        {activeTab === 'analise' ? (
          <>
            {/* TODO O CONTEÚDO JSX QUE ESTAVA AQUI ANTES DEVE SER MANTIDO DENTRO DESTE FRAGMENTO. */}
            {/* O cabeçalho, formulários, botões e a lógica de exibição de resultados permanecem aqui. */}
          </>
        ) : (
          <AboutSaphira />
        )}
      </div>
    </div>
  );
};

export default AnalysisDashboard;
Use code with caution.
TypeScript
5. Adição de Estilos Globais:
Adicione as seguintes regras ao seu arquivo CSS principal (App.css ou index.css) para estilizar a navegação das abas.
Generated css
/* Estilos para a navegação das abas */
.tab-navigation{border-bottom:1px solid #444;margin-bottom:1rem}.tab-navigation button{padding:10px 20px;border:none;background-color:transparent;color:#a0a0a0;cursor:pointer;font-size:1rem;border-bottom:3px solid transparent;transition:all .2s ease-in-out}.tab-navigation button.active{color:#4eacff;border-bottom:3px solid #4eacff}.tab-navigation button:hover{background-color:rgba(255,255,255,.1)}