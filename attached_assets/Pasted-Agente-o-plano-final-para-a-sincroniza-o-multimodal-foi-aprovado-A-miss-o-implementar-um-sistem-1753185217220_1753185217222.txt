Agente, o plano final para a sincroniza√ß√£o multimodal foi aprovado. A miss√£o √© implementar um sistema de upload robusto, com limites claros e feedback para o usu√°rio, garantindo a compatibilidade total com a nova arquitetura do backend.
Sua Miss√£o Definitiva:
Adicione um Estado para Controle de Arquivo: Se ainda n√£o existir, adicione um estado para o arquivo em si: const [selectedFile, setSelectedFile] = useState<File | null>(null);
Modifique a L√≥gica de Upload: Atualize o componente de upload (FileUploader ou a l√≥gica dentro de App.tsx) para aceitar apenas um arquivo por vez, com um limite de tamanho de 10MB. Se um arquivo maior for selecionado, exiba um alerta para o usu√°rio.
Substitua a Fun√ß√£o de Envio (handleSubmit): Substitua completamente a fun√ß√£o handleSubmit no arquivo src/App.tsx pelo c√≥digo multimodal final, que agora lida com o File object diretamente para m√°xima performance e envia os dados como FormData.
Generated typescript
// Em src/App.tsx, substitua a fun√ß√£o handleSubmit por esta:

const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();

  const textToAnalyze = userText.trim();
  if (!selectedFile && !textToAnalyze) {
    alert("Por favor, forne√ßa um texto ou selecione um arquivo para an√°lise.");
    return;
  }
  
  if (loading) return;

  setLoading(true);
  setResult(null);
  console.log("üîç Iniciando an√°lise multimodal...");

  const formData = new FormData();
  formData.append('question', specificQuestion.trim());

  if (selectedFile) {
    formData.append('file', selectedFile);
  } else {
    const textBlob = new Blob([textToAnalyze], { type: 'text/plain' });
    formData.append('file', textBlob, 'input_manual.txt');
  }

  try {
    // A chamada da API agora usa FormData
    const response = await fetch(`${BACKEND_BASE_URL}/api/analyze`, {
      method: 'POST',
      body: formData, // O navegador definir√° o Content-Type correto
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Erro do Servidor: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    setResult(data);
    // (L√≥gica de hist√≥rico, se for re-implementada no futuro)

  } catch (error: unknown) {
    console.error("‚ùå Falha na an√°lise:", error);
    let errorMessage = (error instanceof Error) ? error.message : "Ocorreu um erro desconhecido.";
    setResult({ displayData: { humanized_text: `Falha na An√°lise: ${errorMessage}` } });
  } finally {
    setLoading(false);
  }
};
