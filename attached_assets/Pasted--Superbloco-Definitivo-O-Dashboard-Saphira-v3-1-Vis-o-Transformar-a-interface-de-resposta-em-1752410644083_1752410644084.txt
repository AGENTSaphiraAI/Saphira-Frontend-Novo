üöÄ Superbloco Definitivo ‚Äî O Dashboard Saphira v3.1
‚úÖ Vis√£o: Transformar a interface de resposta em um Dashboard de An√°lise Interativo completo, com abas, m√©tricas visuais e funcionalidades de exporta√ß√£o profissional.
‚û°Ô∏è Instru√ß√£o Final e √önica para o Agente do Replit:
Execute o seguinte plano completo para implementar a nova interface do Saphira-Frontend-Novo.
Etapa 1: Instalar as Depend√™ncias do Dashboard
Execute o seguinte comando no Shell para adicionar as bibliotecas necess√°rias para a nova UI.
Generated bash
npm install framer-motion lucide-react recharts jspdf html2canvas
Use code with caution.
Bash
(Nota: react18-json-view n√£o est√° nesta lista, pois j√° foi instalado e validado com sucesso na etapa anterior. Estamos apenas adicionando o que falta.)
Etapa 2: A Nova Arquitetura de Exibi√ß√£o
A. Refatorar App.tsx:
Modifique o App.tsx para que, ap√≥s receber uma resposta da API, ele renderize um novo componente <AnalysisDashboard />, passando a resposta completa.
Generated typescript
{analysisResponse ? (
  <AnalysisDashboard response={analysisResponse} />
) : (
  /* O layout de boas-vindas que j√° existe */
)}
Use code with caution.
TypeScript
B. Criar AnalysisDashboard.tsx:
Crie o arquivo src/components/dashboard/AnalysisDashboard.tsx. Este ser√° o cont√™iner que ter√° o estado para controlar as abas ativas e que renderizar√° os bot√µes das abas e o conte√∫do de cada uma.
Etapa 3: Criar os Componentes para Cada Aba
Crie os tr√™s componentes que representar√£o o conte√∫do de cada aba.
1. src/components/dashboard/tabs/ReportTab.tsx
Receber√° o interpreted_response e o renderizar√° em Markdown.
Deve incluir um bot√£o com um √≠cone (lucide-react) para copiar o texto.
2. src/components/dashboard/tabs/MetricsTab.tsx
Receber√° o technicalData e exibir√° um grid 2x2.
Cada c√©lula do grid ser√° um subcomponente de card: RadarAnalysisCard, ToneAnalysisCard, IntegrityCard e NexumKeywordsCard.
Esses cards usar√£o gr√°ficos (Recharts), √≠cones (Lucide) e barras de progresso para exibir as m√©tricas de forma visual e intuitiva.
3. src/components/dashboard/tabs/RawDataTab.tsx
Receber√° o technicalData.
Instru√ß√£o Cr√≠tica: Usar√° a biblioteca react18-json-view que j√° foi instalada. O import ser√°:
import JsonView from 'react18-json-view';
Renderizar√° <JsonView data={technicalData} ... />.
Etapa 4: Implementar a Fun√ß√£o de Exporta√ß√£o
Crie um novo arquivo de utilidade.
// üìÅ ARQUIVO NOVO: src/utils/exportToPdf.ts
Crie uma fun√ß√£o exportSaphiraReportToPdf que use jspdf e html2canvas para:
Gerar uma imagem da "Aba de M√©tricas Visuais".
Criar um PDF com duas p√°ginas:
P√°gina 1: Um cabe√ßalho com o logo da Saphira, a data e a resposta de texto do "Relat√≥rio Principal".
P√°gina 2: A imagem gerada da an√°lise de m√©tricas.
Conclus√£o para o Agente:
O objetivo √© claro. Instale as depend√™ncias. Crie os novos componentes de dashboard e abas. Conecte-os ao App.tsx. Implemente a fun√ß√£o de exporta√ß√£o. O resultado final deve ser a nova interface interativa, rica e totalmente funcional.