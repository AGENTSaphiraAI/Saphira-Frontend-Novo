// ✅ Objetivo geral
// Adicionar campo de pergunta, integrar com backend e exibir resposta interpretada, humanizada.

import React, { useState } from 'react';
import './App.css';

export default function App() {
  const [text, setText] = useState('');
  const [question, setQuestion] = useState('');
  const [result, setResult] = useState('');
  const [status, setStatus] = useState('Aguardando entrada...');
  const [isLoading, setIsLoading] = useState(false);

  // ✅ URL correta do backend
  const API_URL = import.meta.env.VITE_API_URL || 'https://b70cbe73-5ac1-4669-ac5d-3129d59fb7a8-00-3ccdko9zwgzm3.riker.replit.dev/api/analyze';

  const handleSubmit = async () => {
    if (!text.trim() || !question.trim()) {
      setResult('⚠️ Preencha tanto o texto quanto a pergunta.');
      return;
    }
    setIsLoading(true);
    setStatus('Processando análise...');
    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: text.trim(),
          question: question.trim(),
        }),
      });
      const data = await response.json();
      if (data?.interpreted_response) {
        // ✅ Exibe apenas resposta interpretada
        setResult(`💬 Resposta da Saphira:\n\n${data.interpreted_response}`);
      } else if (data?.synthesis?.summary) {
        // Backup: se não vier interpretada, exibe resumo
        setResult(`💬 Resumo:\n\n${data.synthesis.summary}`);
      } else {
        setResult('⚠️ Resposta inesperada. Verifique o backend.');
      }
    } catch (error) {
      setResult(`Erro: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setIsLoading(false);
      setStatus('Pronto para nova análise.');
    }
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      const content = event.target?.result as string;
      setText(content);
    };

    if (file.type === 'application/json' || file.name.endsWith('.json')) {
      reader.readAsText(file);
    } else if (file.type === 'text/plain' || file.name.endsWith('.txt')) {
      reader.readAsText(file);
    } else {
      setResult('⚠️ Tipo de arquivo não suportado. Use .txt ou .json.');
    }
  };

  const handleClear = () => {
    setText('');
    setQuestion('');
    setResult('');
    setStatus('Campos limpos. Pronto para nova entrada.');
  };

  return (
    <main>
      <h1>💙 Saphira - Análise Inteligente</h1>
      <p>{status}</p>
      <textarea
        placeholder="Cole ou digite seu texto aqui..."
        value={text}
        onChange={(e) => setText(e.target.value)}
      />
      <input
        type="text"
        placeholder="Digite sua pergunta aqui..."
        value={question}
        onChange={(e) => setQuestion(e.target.value)}
        style={{ width: '100%', marginTop: '8px', padding: '8px' }}
      />
      <div className="button-group">
        <button onClick={handleSubmit} disabled={isLoading}>
          🔍 Analisar
        </button>
        <button onClick={handleClear}>🧹 Limpar</button>
        <input
          type="file"
          accept=".txt,application/json"
          onChange={handleFileUpload}
          style={{ marginTop: '10px' }}
        />
      </div>
      <section className="result-area">
        <h3>📑 Resultado:</h3>
        <pre>{result}</pre>
      </section>
    </main>
  );
}
