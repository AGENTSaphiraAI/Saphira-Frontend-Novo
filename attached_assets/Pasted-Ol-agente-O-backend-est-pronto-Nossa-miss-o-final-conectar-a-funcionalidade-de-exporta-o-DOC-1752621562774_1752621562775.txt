Ol√°, agente. O backend est√° pronto. Nossa miss√£o final √© conectar a funcionalidade de exporta√ß√£o DOCX no frontend. Faremos isso em dois arquivos para manter a organiza√ß√£o do c√≥digo.
Passo 1: Adicionar a L√≥gica de Exporta√ß√£o em src/App.tsx
Modifique o arquivo App.tsx. Vamos criar uma nova fun√ß√£o handleExportDocx e pass√°-la para o componente <AnalysisDashboard />.
Crie a fun√ß√£o handleExportDocx dentro do componente App. Ela far√° a chamada para o novo endpoint:
Generated typescript
// Adicione esta nova fun√ß√£o dentro do componente App, perto dos outros handlers
const handleExportDocx = useCallback(async () => {
  if (!result) {
    alert("‚ö†Ô∏è Nenhuma resposta para exportar.");
    return;
  }
  console.log("üì• Iniciando exporta√ß√£o para DOCX...");
  
  const backendUrl = getBackendUrl(); // Esta fun√ß√£o j√° existe no arquivo
  
  try {
    const response = await fetch(`${backendUrl}/api/export/docx`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        humanized_text: result.humanized_text,
        verificationCode: result.verificationCode
      })
    });

    if (!response.ok) {
      throw new Error(`Erro no servidor: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    const fileName = `saphira_relatorio_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.docx`;
    saveAs(blob, fileName); // A fun√ß√£o saveAs j√° foi importada
    console.log(`‚úÖ Relat√≥rio DOCX exportado: ${fileName}`);

  } catch (err) {
    console.error("‚ùå Erro ao exportar DOCX:", err);
    alert("Falha ao gerar o relat√≥rio DOCX. Verifique o console.");
  }
}, [result]); // Depende do 'result'
Use code with caution.
TypeScript
Passe a nova fun√ß√£o como prop para o <AnalysisDashboard />. Encontre a linha onde o dashboard √© renderizado e adicione a nova propriedade:
Generated typescript
// A renderiza√ß√£o do seu dashboard deve ficar assim:
<AnalysisDashboard 
  response={result} 
  handleExportResponseJSON={handleExportResponseJSON}
  handleExportDocx={handleExportDocx} // Adicione esta linha
/>
Use code with caution.
TypeScript
Passo 2: Ativar o Bot√£o em src/components/dashboard/AnalysisDashboard.tsx
Agora, vamos dizer ao bot√£o para usar a nova fun√ß√£o que acabamos de passar.
Atualize a interface no topo do arquivo para aceitar a nova prop:
Generated typescript
interface AnalysisDashboardProps {
  response: { /* ... */ };
  handleExportResponseJSON?: () => void;
  handleExportDocx?: () => Promise<void>; // Adicione esta linha
}
Use code with caution.
TypeScript
Receba a prop na declara√ß√£o do componente:
Generated typescript
const AnalysisDashboard: React.FC<AnalysisDashboardProps> = ({ response, handleExportResponseJSON, handleExportDocx }) => {
  // ...
};
Use code with caution.
TypeScript
Conecte o bot√£o. Encontre o bot√£o "Exportar DOC" e modifique-o para que ele chame a fun√ß√£o e n√£o fique mais desabilitado:
Generated typescript
// Encontre este bot√£o e o modifique
<button 
  className="export-pdf-button"
  onClick={handleExportDocx} // Ativa o onClick
  disabled={!handleExportDocx}  // Habilitado se a fun√ß√£o existir
>
  <Download size={20} />
  Exportar DOC
</button>
Use code with caution.
TypeScript
Ap√≥s estas modifica√ß√µes, o ciclo estar√° completo. O bot√£o "Exportar DOC" estar√° vivo e funcional.