üöÄ SUPERBLOCO CONSOLIDADO E OTIMIZADO ‚Äî Frontend v3.0 (O Painel de Comando Interativo)
‚úÖ Vis√£o Geral: O conceito central √© abolir a simples "√°rea de resposta" e, ap√≥s uma an√°lise, transformar toda a se√ß√£o em um Dashboard de An√°lise Interativo. Este dashboard se tornar√° o novo cora√ß√£o da aplica√ß√£o, oferecendo uma hierarquia de informa√ß√£o que vai da conclus√£o sum√°ria aos dados mais granulares.
‚û°Ô∏è Instru√ß√£o Final para o Agente do Replit:
Execute o seguinte plano de implementa√ß√£o para o projeto Saphira-Frontend-Novo.
Etapa 1: A Nova Estrutura da Interface (App.tsx)
Refatore o componente App.tsx para, ap√≥s uma an√°lise bem-sucedida, n√£o apenas exibir uma resposta, mas renderizar um componente principal chamado <AnalysisDashboard />, passando a resposta completa da API como prop.
Generated typescript
// Em App.tsx
{analysisResponse ? (
  <AnalysisDashboard response={analysisResponse} />
) : (
  // O que √© exibido antes da an√°lise
)}
Use code with caution.
TypeScript
Etapa 2: O Novo Componente <AnalysisDashboard />
Este ser√° o cont√™iner principal para toda a experi√™ncia p√≥s-an√°lise.
// üìÅ ARQUIVO NOVO: src/components/dashboard/AnalysisDashboard.tsx
Ele ter√° a seguinte estrutura interna:
1. Um Header Din√¢mico: (Elemento Surpresa ‚ú®)
Um cabe√ßalho que resume o resultado antes mesmo das abas.
Conter√° um "Selo de Integridade Saphira": um √≠cone (como um escudo üõ°Ô∏è) com uma cor que muda baseada na pontua√ß√£o de coer√™ncia (verde para alta, amarelo para m√©dia, vermelho para baixa).
Ao lado do selo, o "Diagn√≥stico Principal (Core ALMA)" ser√° exibido de forma destacada.
2. O Sistema de Abas (Tabs):
Logo abaixo do header, renderizar os 3 bot√µes de abas: Relat√≥rio, M√©tricas Visuais e Dados Brutos.
Abaixo dos bot√µes, uma √°rea de conte√∫do que muda conforme a aba ativa.
Etapa 3: O Conte√∫do Detalhado de Cada Aba e Seus Subcomponentes
Aba 1: "Relat√≥rio"
// üìÑ COMPONENTE: <ReportTab content={response.interpreted_response} />
Exibir√° a resposta Markdown da Saphira.
‚ú® Otimiza√ß√£o Gemini: Incluir√° um bot√£o de c√≥pia (Clipboard API) no canto superior direito do card, permitindo copiar o relat√≥rio completo com um clique.
Aba 2: "M√©tricas Visuais" (O Ponto Central)
// üìä COMPONENTE: <MetricsTab technicalData={response.technicalData} />
Exibir√° o grid 2x2 de cards. Cada card √© um componente independente:
Card #1 - Gr√°fico de An√°lise: <RadarAnalysisCard data={...} />
Exibir√° o Gr√°fico de Radar que j√° conhecemos. Sem mudan√ßas aqui, ele √© perfeito.
Card #2 - Diagn√≥stico de Tom: <ToneAnalysisCard data={...} />
‚ú® Otimiza√ß√£o Gemini: N√£o ser√° apenas texto. Mostrar√° um √≠cone proeminente (:), :|, :() e um termo claro (Positivo, Neutro, Negativo). A cor de fundo do card mudar√° sutilmente para refletir o tom (verde-claro, cinza-claro, rosa-claro).
Card #3 - Integridade do Documento: <IntegrityCard data={...} />
‚ú® Otimiza√ß√£o Gemini: Mostrar√° as m√©tricas de "Coer√™ncia L√≥gica" e "Clareza" usando barras de progresso ou gr√°ficos de anel (donuts) para uma visualiza√ß√£o r√°pida e impactante.
Card #4 - Conceitos-Chave (NEXUM): <NexumKeywordsCard keywords={[...]} />
‚ú® Otimiza√ß√£o Gemini: Exibir√° as palavras-chave extra√≠das n√£o como uma lista, mas como "tags" ou "pills" estilizadas, com um leve efeito de hover. Isso as torna mais interativas e visualmente agrad√°veis.
Aba 3: "Dados Brutos"
// üíæ COMPONENTE: <RawDataTab data={response.technicalData} />
Usar√° o react-json-view como planejado, garantindo total transpar√™ncia e auditabilidade.
Etapa 4: Implementa√ß√£o das Funcionalidades de Utilidade
Bot√£o de Exporta√ß√£o para PDF
// üìÑ FUN√á√ÉO UTILIT√ÅRIA: src/utils/exportToPdf.ts
‚ú® Otimiza√ß√£o Gemini (Relat√≥rio Profissional):
P√°gina 1: Ter√° um cabe√ßalho fixo com o Logo da Saphira, o t√≠tulo "Relat√≥rio de An√°lise T√©cnica" e o timestamp da gera√ß√£o. Abaixo, o conte√∫do da "Aba Relat√≥rio".
P√°gina 2: Ter√° um t√≠tulo "An√°lise de M√©tricas" e uma imagem de alta qualidade gerada com html2canvas da "Aba de M√©tricas Visuais".
Rodap√©: Todas as p√°ginas ter√£o um rodap√© discreto: "Gerado pela Saphira - An√°lise Inteligente, T√©cnica e Audit√°vel".
Etapa 5: Depend√™ncias Necess√°rias
Instrua o Agente a instalar as bibliotecas necess√°rias para todas estas funcionalidades.
// üì¶ COMANDO DE INSTALA√á√ÉO:
Generated bash
npm install recharts react-json-view jspdf html2canvas framer-motion lucide-react
Use code with caution.
Bash
(Nota: framer-motion para anima√ß√µes fluidas entre abas e lucide-react para um conjunto de √≠cones limpos e de alta qualidade para os bot√µes de copiar e cards).