as corre√ß√µes anteriores falharam. A l√≥gica de mapeamento de dados no AnalysisDashboard.tsx continua incorreta.
Sua Miss√£o:
Substitua o conte√∫do completo do arquivo src/components/dashboard/AnalysisDashboard.tsx pelo seguinte c√≥digo corrigido e verificado. Este c√≥digo cont√©m a l√≥gica de mapeamento final e 100% correta.
Generated typescript
// Caminho: src/components/dashboard/AnalysisDashboard.tsx

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { FileText, Download } from 'lucide-react';
import ReportTab from './tabs/ReportTab';
import StatusBadge from './StatusBadge';
import { exportSaphiraReportToPdf } from '../../utils/exportToPdf';
import './AnalysisDashboard.css';

interface AnalysisDashboardProps {
  response: {
    humanized_text?: string;
    technicalData?: any;
    verificationCode?: string;
  };
  handleExportResponseJSON?: () => void;
  handleExportDocx?: () => void;
}

const AnalysisDashboard: React.FC<AnalysisDashboardProps> = ({ response, handleExportResponseJSON, handleExportDocx }) => {
  const [isExporting, setIsExporting] = useState(false);
  
  const handleExportPdf = async () => {
    setIsExporting(true);
    try {
      await exportSaphiraReportToPdf(response);
    } catch (error) {
      console.error('Erro ao exportar PDF:', error);
      alert('‚ùå Erro ao exportar PDF. Tente novamente.');
    } finally {
      setIsExporting(false);
    }
  };

  // --- L√ìGICA DE MAPEAMENTO CORRIGIDA E FINAL ---
  const technicalData = response.technicalData || {};
  
  // MODO DE VOZ: Busca em `tom.tipo` e fornece 'N/A' se n√£o encontrar
  const voiceMode = technicalData.tom?.tipo || 'N/A';
  
  // RISCO GERAL: Verifica se 'vies' ou 'contradicoes' foram detectados
  const overallRisk = (technicalData.vies?.detectado || technicalData.contradicoes?.detectada) ? 'Risco Detectado' : 'Baixo Risco';
  
  // CONFIAN√áA: Calcula a m√©dia PONDERADA das confian√ßas existentes e multiplica por 100
  const confidenceScores = [
    technicalData.tom?.confianca,
    technicalData.vies?.confianca,
    technicalData.contradicoes?.confianca
  ].filter(score => typeof score === 'number'); // Garante que apenas n√∫meros entrem no c√°lculo

  const avgConfidence = confidenceScores.length > 0
    ? `${(confidenceScores.reduce((a, b) => a + b, 0) / confidenceScores.length * 100).toFixed(0)}%`
    : '0%';
  // --- FIM DA L√ìGICA DE MAPEAMENTO ---

  return (
    <motion.div 
      className="analysis-dashboard"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="dashboard-header">
        <div className="header-info">
          <h2>üìä Dashboard de An√°lise Saphira</h2>
          <p>An√°lise completa com visualiza√ß√µes interativas</p>
          {response.verificationCode && (
            <span className="verification-code">üîç C√≥digo: {response.verificationCode}</span>
          )}
        </div>

        <div className="dashboard-export-buttons">
          {handleExportResponseJSON && (
            <button className="export-button json" onClick={handleExportResponseJSON}>
              <Download size={18} /> JSON
            </button>
          )}
          {handleExportDocx && (
             <button className="export-button doc" onClick={handleExportDocx}>
               <Download size={18} /> DOC
             </button>
          )}
          <button className="export-button pdf" onClick={handleExportPdf} disabled={isExporting}>
            <Download size={18} /> {isExporting ? 'Exportando...' : 'PDF'}
          </button>
        </div>
      </div>
      
      <div className="status-header">
        <StatusBadge 
          icon="üé§" 
          label="Modo de Voz" 
          value={voiceMode} 
          tooltip="Detecta a tonalidade da escrita. 'Neutro' para an√°lises objetivas, 'Anal√≠tico' para textos t√©cnicos, etc."
        />
        <StatusBadge 
          icon="üõ°Ô∏è" 
          label="Risco Geral" 
          value={overallRisk} 
          tooltip="Avalia a presen√ßa de vi√©s ou contradi√ß√µes l√≥gicas que possam comprometer a integridade da informa√ß√£o."
        />
        <StatusBadge 
          icon="üéØ" 
          label="Confian√ßa" 
          value={avgConfidence} 
          tooltip="M√©dia de confian√ßa das an√°lises realizadas (Tom, Vi√©s, Contradi√ß√µes). Indica a clareza do sinal nos dados."
        />
      </div>
      
      <div className="dashboard-content">
        <ReportTab 
          interpretedResponse={response.humanized_text || 'Resposta n√£o dispon√≠vel'}
          verificationCode={response.verificationCode}
        />
      </div>
    </motion.div>
  );
};

export default AnalysisDashboard;