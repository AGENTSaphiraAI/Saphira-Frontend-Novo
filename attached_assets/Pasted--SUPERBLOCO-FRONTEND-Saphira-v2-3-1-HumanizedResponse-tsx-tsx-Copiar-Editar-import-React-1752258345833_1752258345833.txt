üíé üåä SUPERBLOCO FRONTEND ‚Äî Saphira v2.3+
‚úÖ 1Ô∏è‚É£ HumanizedResponse.tsx
tsx
Copiar
Editar
import React from 'react';

interface HumanizedResponseProps {
  data: {
    humanized_text: string;
    resposta_geral: string;
  };
}

const HumanizedResponse: React.FC<HumanizedResponseProps> = ({ data }) => {
  return (
    <div className="card response-card">
      <h3>üí¨ Saphira diz:</h3>
      <p>{data.humanized_text}</p>
      <p><strong>{data.resposta_geral}</strong></p>
    </div>
  );
};

export default HumanizedResponse;
‚úÖ 2Ô∏è‚É£ TechnicalDetails.tsx
tsx
Copiar
Editar
import React from 'react';
import Badge from './Badge';

interface TechnicalDetailsProps {
  data: {
    tom: { tipo: string; confianca: number };
    vies: { detectado: boolean; confianca: number };
    contradicoes: { detectada: boolean; confianca: number };
    sugestao: string;
  };
}

const TechnicalDetails: React.FC<TechnicalDetailsProps> = ({ data }) => {
  return (
    <div className="card technical-card">
      <h4>üìÑ Dados T√©cnicos</h4>
      <Badge icon="üé≠" label={`Tom: ${data.tom.tipo} (${Math.round(data.tom.confianca * 100)}%)`} category="tom" />
      <Badge icon="‚öñÔ∏è" label={`Vi√©s: ${data.vies.detectado ? 'Detectado' : 'N√£o detectado'} (${Math.round(data.vies.confianca * 100)}%)`} category="vies" />
      <Badge icon="‚ùó" label={`Contradi√ß√µes: ${data.contradicoes.detectada ? 'Sim' : 'N√£o'} (${Math.round(data.contradicoes.confianca * 100)}%)`} category="contradicao" />
      <p>üí° <strong>Sugest√£o:</strong> {data.sugestao}</p>
    </div>
  );
};

export default TechnicalDetails;
‚úÖ 3Ô∏è‚É£ MetadataInfo.tsx
tsx
Copiar
Editar
import React from 'react';

interface MetadataInfoProps {
  data: {
    source_type: string;
    processing_time: string;
    modules_used: string[];
  };
}

const MetadataInfo: React.FC<MetadataInfoProps> = ({ data }) => {
  return (
    <div className="card metadata-card">
      <h5>‚ÑπÔ∏è Metadados</h5>
      <p>Fonte: {data.source_type}</p>
      <p>Tempo de processamento: {data.processing_time}</p>
      <p>M√≥dulos: {data.modules_used.join(", ")}</p>
    </div>
  );
};

export default MetadataInfo;
‚úÖ 4Ô∏è‚É£ Badge.tsx
tsx
Copiar
Editar
import React from 'react';

interface BadgeProps {
  icon: string;
  label: string;
  category: 'tom' | 'vies' | 'contradicao';
}

const Badge: React.FC<BadgeProps> = ({ icon, label, category }) => {
  return (
    <div className={`badge ${category}`}>
      <span>{icon}</span> {label}
    </div>
  );
};

export default Badge;
‚úÖ 5Ô∏è‚É£ App.tsx (ajustes principais)
No seu App.tsx, usar assim (exemplo):

tsx
Copiar
Editar
import HumanizedResponse from './components/analysis/HumanizedResponse';
import TechnicalDetails from './components/analysis/TechnicalDetails';
import MetadataInfo from './components/analysis/MetadataInfo';

// ... resto do c√≥digo

{isLoading && <p>Analisando...</p>}
{error && <p>Erro: {error}</p>}
{analysisResult && (
  <>
    <HumanizedResponse data={analysisResult.displayData} />
    <TechnicalDetails data={analysisResult.technicalData} />
    <MetadataInfo data={analysisResult.metadata} />
  </>
)}
‚úÖ 6Ô∏è‚É£ Sugest√£o de CSS b√°sico (index.css ou global.css)
css
Copiar
Editar
.card {
  background: #ffffff11;
  padding: 1rem;
  margin: 0.5rem 0;
  border-radius: 12px;
  backdrop-filter: blur(5px);
}

.response-card p {
  font-size: 1rem;
  line-height: 1.5;
}

.technical-card p, .metadata-card p {
  font-size: 0.9rem;
}

.badge {
  display: inline-block;
  margin: 0.2rem;
  padding: 0.4rem 0.7rem;
  border-radius: 20px;
  background-color: #38bdf8;
  color: white;
  font-size: 0.8rem;
}

.badge.tom { background-color: #38bdf8; }
.badge.vies { background-color: #f97316; }
.badge.contradicao { background-color: #ef4444; }
