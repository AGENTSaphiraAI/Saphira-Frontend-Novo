 recebemos os dicion√°rios completos. Nossa miss√£o final √© atualizar nossos quatro componentes de card para que eles possam ler e exibir a nova e rica estrutura de dados do backend.
Sua Tarefa:
Substitua o conte√∫do completo dos seguintes quatro arquivos pelos seus novos c√≥digos-fonte correspondentes.
1. src/components/dashboard/cards/RadarAnalysisCard.tsx
Generated typescript
import React from 'react';
import { RadarChart, PolarGrid, PolarAngleAxis, Radar, ResponsiveContainer } from 'recharts';
import { Target } from 'lucide-react';

interface RadarAnalysisCardProps {
  technicalData: any;
}

const RadarAnalysisCard: React.FC<RadarAnalysisCardProps> = ({ technicalData }) => {
  // NOVA L√ìGICA DE EXTRA√á√ÉO - L√™ o JSON real do backend
  const data = [
    { subject: 'Risco Forense', A: technicalData?.forensic_analysis?.risk_score || 0, fullMark: 100 },
    { subject: 'Carga Emocional', A: (technicalData?.forensic_analysis?.emotional_load_score || 0) * 10, fullMark: 100 },
    { subject: 'Densidade Jur√≠dica', A: (technicalData?.legal_extraction?.densidade_juridica || 0) * 10, fullMark: 100 },
    { subject: 'Confian√ßa Geral', A: (technicalData?.confidence_level?.score || 0) * 100, fullMark: 100 },
    { subject: 'Assertividade', A: (technicalData?.voice_calibration?.assertiveness_level || 0) * 20, fullMark: 100 },
  ];

  return (
    <div className="metric-card radar-card">
      <div className="card-header">
        <Target className="card-icon" size={20} />
        <h4>An√°lise Multidimensional</h4>
      </div>
      <div className="card-content">
        <ResponsiveContainer width="100%" height={200}>
          <RadarChart data={data}>
            <PolarGrid stroke="#e2e8f0" />
            <PolarAngleAxis dataKey="subject" tick={{ fontSize: 12, fill: '#64748b' }} />
            <PolarRadiusAxis angle={90} domain={[0, 100]} tick={{ fontSize: 10, fill: '#64748b' }} />
            <Radar name="Score" dataKey="A" stroke="#0b74e5" fill="#0b74e5" fillOpacity={0.3} strokeWidth={2} />
          </RadarChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

export default RadarAnalysisCard;
Use code with caution.
TypeScript
2. src/components/dashboard/cards/ToneAnalysisCard.tsx
Generated typescript
import React from 'react';
import { MessageSquare } from 'lucide-react';

interface ToneAnalysisCardProps {
  technicalData: any;
}

const ToneAnalysisCard: React.FC<ToneAnalysisCardProps> = ({ technicalData }) => {
  // NOVA L√ìGICA DE EXTRA√á√ÉO
  const dominantTone = technicalData?.voice_calibration?.voice_mode || 'N/A';
  const emotionalTone = technicalData?.forensic_analysis?.emotional_classification || 'N/A';
  
  const getToneEmoji = (tone: string) => {
    switch (tone.toLowerCase()) {
      case 'juiza': return '‚öñÔ∏è';
      case 'consultora': return 'ü§î';
      case 'amiga': return 'üòä';
      default: return 'üòê';
    }
  };

  return (
    <div className="metric-card tone-card">
      <div className="card-header">
        <MessageSquare className="card-icon" size={20} />
        <h4>Calibra√ß√£o de Voz e Tom</h4>
      </div>
      <div className="card-content">
        <div className="tone-summary">
          <div className="dominant-tone">
            <span className="tone-emoji">{getToneEmoji(dominantTone)}</span>
            <div>
              <span className="tone-label">Modo de Voz</span>
              <span className="tone-value">{dominantTone}</span>
            </div>
          </div>
          <div className="confidence-score">
            <span className="confidence-label">Tom Emocional</span>
            <span className="confidence-value">{emotionalTone}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ToneAnalysisCard;
Use code with caution.
TypeScript
3. src/components/dashboard/cards/IntegrityCard.tsx
Generated typescript
import React from 'react';
import { Shield } from 'lucide-react';

interface IntegrityCardProps {
  technicalData: any;
}

const IntegrityCard: React.FC<IntegrityCardProps> = ({ technicalData }) => {
  // NOVA L√ìGICA DE EXTRA√á√ÉO
  const riskLevel = technicalData?.forensic_analysis?.overall_manipulation_risk || 'Indefinido';
  const riskScore = technicalData?.forensic_analysis?.risk_score || 0;
  const sources = technicalData?.forensic_analysis?.source_attribution_quality || 'N/A';
  
  const getRiskColor = () => {
    if (riskLevel.toLowerCase().includes('baixo')) return '#10b981'; // verde
    if (riskLevel.toLowerCase().includes('moderado')) return '#f59e0b'; // amarelo
    return '#ef4444'; // vermelho
  }

  return (
    <div className="metric-card integrity-card">
      <div className="card-header">
        <Shield className="card-icon" size={20} />
        <h4>Integridade e Risco</h4>
      </div>
      <div className="card-content">
         <div className="integrity-details">
          <div className="detail-item" style={{ color: getRiskColor(), fontWeight: 'bold' }}>
             <span>{riskLevel}</span>
          </div>
          <div className="detail-item">
            <span>Score de Risco: {riskScore.toFixed(2)}%</span>
          </div>
           <div className="detail-item">
            <span>Qualidade das Fontes: {sources}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default IntegrityCard;
Use code with caution.
TypeScript
4. src/components/dashboard/cards/NexumKeywordsCard.tsx
Generated typescript
import React from 'react';
import { Hash } from 'lucide-react';

interface NexumKeywordsCardProps {
  technicalData: any;
}

const NexumKeywordsCard: React.FC<NexumKeywordsCardProps> = ({ technicalData }) => {
  // NOVA L√ìGICA DE EXTRA√á√ÉO
  const keywords = technicalData?.keywords || [];

  return (
    <div className="metric-card keywords-card">
      <div className="card-header">
        <Hash className="card-icon" size={20} />
        <h4>Conceitos-Chave (NEXUM)</h4>
      </div>
      <div className="card-content">
        <div className="keywords-list-tags">
          {keywords.length > 0 ? keywords.map((keyword: string, index: number) => (
            <span key={index} className="keyword-tag">{keyword}</span>
          )) : <p>Nenhum conceito-chave extra√≠do.</p>}
        </div>
      </div>
      <style>{`
        .keywords-list-tags {
          display: flex;
          flex-wrap: wrap;
          gap: 0.5rem;
        }
        .keyword-tag {
          background-color: #e8eaf6;
          color: #3f51b5;
          padding: 0.25rem 0.75rem;
          border-radius: 1rem;
          font-size: 0.8rem;
          font-weight: 500;
        }
      `}</style>
    </div>
  );
};

export default NexumKeywordsCard;